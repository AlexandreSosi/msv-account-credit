AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Cloudformation for Account Credit From Withe Card

  Create Cognito Pool and Client
  Create Role for Cognito Access SNS
  Create Authorizer for APIGateway
  Create LambdaFunction
  Create APIGateway and link with integration Lambda

Resources:
  # Creates a role that allows Cognito to send SNS messages
  SNSRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cognito-idp.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CognitoSNSPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sns:publish"
                Resource: "*"

  # Creates a user pool in cognito for your app to auth against
  # This example requires MFA and validates the phone number to use as MFA
  # Other fields can be added to the schema
  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: accountcredit-user-pool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - phone_number
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      MfaConfiguration: "OPTIONAL"
      SmsConfiguration:
        ExternalId: accountcredit-external
        SnsCallerArn: !GetAtt SNSRole.Arn
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: false
          Required: true


  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: accountcredit-client
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH

  # Creates a federeated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: accountcreditIdentity
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Create a role for unauthorized acces to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  # Create a role for authorized acces to AWS resources. Control what your user can access. This example only allows Lambda invokation
  # Only allows users in the previously created Identity Pool
  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn


  RoleLambda:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Principal": { "Service": [ "lambda.amazonaws.com","apigateway.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
          }]
        }
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      RoleName: "lambda-role-default"

  AccountFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: app.ProxyLambdaHandler::handleRequest
      Runtime: java8
      MemorySize: 512
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/lambda-role-default
      Description: Account Credit for Withe Card
      Environment:
        Variables:
          API_ENV: "PROD"
      FunctionName: !Sub "${AWS::StackName}"
      Timeout: 30
      TracingConfig:
        Mode:
          PassThrough

  ApiAccountGateway:
    DependsOn: [ AccountFunction ]
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${AWS::StackName}"
      Description: Account Credit for Withe Card
      FailOnWarnings: true
      EndpointConfiguration:
        Types: [ REGIONAL ]

  AuthCognito:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: 'method.request.header.Authorization'
      Name: 'sso-msv-cognito'
      ProviderARNs:
        - !GetAtt 'UserPool.Arn'
      RestApiId: !Ref ApiAccountGateway
      Type: 'COGNITO_USER_POOLS'


  LambdaRootPermission:
    DependsOn: [ ApiAccountGateway ]
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref AccountFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiAccountGateway}/*/*/"

  ApiRootRequest:
    DependsOn: [ LambdaRootPermission ]
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref AuthCognito
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AccountFunction}/invocations"
      ResourceId: !GetAtt ApiAccountGateway.RootResourceId
      RestApiId: !Ref ApiAccountGateway

  ApiProxyResource:
    DependsOn: [ ApiAccountGateway ]
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiAccountGateway
      ParentId: !GetAtt ApiAccountGateway.RootResourceId
      PathPart: "{proxy+}"

  LambdaProxyPermission:
    DependsOn: [ ApiAccountGateway ]
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !Ref AccountFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiAccountGateway}/*/*/*"

  ApiProxyRequest:
    DependsOn: [ LambdaProxyPermission ]
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref AuthCognito
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AccountFunction}/invocations"
      ResourceId: !Ref ApiProxyResource
      RestApiId: !Ref ApiAccountGateway

  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "apigateway.amazonaws.com" ] },
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument: |
            {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }]
            }

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt [ ApiGatewayCloudWatchLogsRole, Arn ]

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [ ApiProxyRequest, ApiRootRequest ]
    Properties:
      RestApiId: !Ref ApiAccountGateway

  ApiGatewayStage:
    DependsOn: [ ApiGatewayAccount ]
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
      RestApiId: !Ref ApiAccountGateway
      StageName: latest

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiAccountGateway:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ApiAccountGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/account/"
  AccountFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt AccountFunction.Arn
  AccountFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt AccountFunction.Arn
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub "UserPool::Id"
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "UserPoolClient::Id"
  IdentityPoolId:
    Value: !Ref IdentityPool
    Export:
      Name: !Sub "IdentityPool::Id"
