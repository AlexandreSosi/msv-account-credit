AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS

  Sample SAM Template for AWS

  '
Outputs:
  AccountFunction:
    Description: Hello World Lambda Function ARN
    Value:
      Fn::GetAtt:
      - AccountFunction
      - Arn
  AccountFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value:
      Fn::GetAtt:
      - AccountFunction
      - Arn
  ApiAccountGateway:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value:
      Fn::Sub: https://${ApiAccountGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/account/
  IdentityPoolId:
    Export:
      Name:
        Fn::Sub: IdentityPool::Id
    Value:
      Ref: IdentityPool
  UserPoolClientId:
    Export:
      Name:
        Fn::Sub: UserPoolClient::Id
    Value:
      Ref: UserPoolClient
  UserPoolId:
    Export:
      Name:
        Fn::Sub: UserPool::Id
    Value:
      Ref: UserPool
Resources:
  AccountFunction:
    Properties:
      Code:
        S3Bucket: accountemplates
        S3Key: 050ef86c52fa4f783448e3fbb908b7e5
      Description:
      Environment:
        Variables:
          API_ENV: PROD
      FunctionName:
        Fn::Sub: ${AWS::StackName}
      Handler: app.ProxyLambdaHandler::handleRequest
      MemorySize: 512
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/lambda-role-default
      Runtime: java8
      Timeout: 30
      TracingConfig:
        Mode: PassThrough
    Type: AWS::Lambda::Function
  ApiAccountGateway:
    DependsOn:
    - AccountFunction
    Properties:
      Description:
      EndpointConfiguration:
        Types:
        - REGIONAL
      FailOnWarnings: true
      Name:
        Fn::Sub: ${AWS::StackName}
    Type: AWS::ApiGateway::RestApi
  ApiDeployment:
    DependsOn:
    - ApiProxyRequest
    - ApiRootRequest
    Properties:
      RestApiId:
        Ref: ApiAccountGateway
    Type: AWS::ApiGateway::Deployment
  ApiGatewayAccount:
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayCloudWatchLogsRole
        - Arn
    Type: AWS::ApiGateway::Account
  ApiGatewayCloudWatchLogsRole:
    Properties:
      AssumeRolePolicyDocument: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\"\
        : [{\n        \"Effect\": \"Allow\",\n        \"Principal\": { \"Service\"\
        : [ \"apigateway.amazonaws.com\" ] },\n        \"Action\": [ \"sts:AssumeRole\"\
        \ ]\n    }]\n}\n"
      Policies:
      - PolicyDocument: "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [{\n\
          \      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"logs:CreateLogGroup\"\
          ,\n        \"logs:CreateLogStream\",\n        \"logs:DescribeLogGroups\"\
          ,\n        \"logs:DescribeLogStreams\",\n        \"logs:PutLogEvents\",\n\
          \        \"logs:GetLogEvents\",\n        \"logs:FilterLogEvents\"\n    \
          \  ],\n      \"Resource\": \"*\"\n    }]\n}\n"
        PolicyName: ApiGatewayLogsPolicy
    Type: AWS::IAM::Role
  ApiGatewayStage:
    DependsOn:
    - ApiGatewayAccount
    Properties:
      DeploymentId:
        Ref: ApiDeployment
      MethodSettings:
      - DataTraceEnabled: true
        HttpMethod: '*'
        LoggingLevel: INFO
        ResourcePath: /*
      RestApiId:
        Ref: ApiAccountGateway
      StageName: latest
    Type: AWS::ApiGateway::Stage
  ApiProxyRequest:
    DependsOn:
    - LambdaProxyPermission
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: AuthCognito
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AccountFunction}/invocations
      ResourceId:
        Ref: ApiProxyResource
      RestApiId:
        Ref: ApiAccountGateway
    Type: AWS::ApiGateway::Method
  ApiProxyResource:
    DependsOn:
    - ApiAccountGateway
    Properties:
      ParentId:
        Fn::GetAtt:
        - ApiAccountGateway
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId:
        Ref: ApiAccountGateway
    Type: AWS::ApiGateway::Resource
  ApiRootRequest:
    DependsOn:
    - LambdaRootPermission
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: AuthCognito
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AccountFunction}/invocations
      ResourceId:
        Fn::GetAtt:
        - ApiAccountGateway
        - RootResourceId
      RestApiId:
        Ref: ApiAccountGateway
    Type: AWS::ApiGateway::Method
  AuthCognito:
    Properties:
      IdentitySource: method.request.header.Authorization
      Name: sso-msv-cognito
      ProviderARNs:
      - Fn::GetAtt:
        - UserPool
        - Arn
      RestApiId:
        Ref: ApiAccountGateway
      Type: COGNITO_USER_POOLS
    Type: AWS::ApiGateway::Authorizer
  CognitoAuthorizedRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - mobileanalytics:PutEvents
            - cognito-sync:*
            - cognito-identity:*
            Effect: Allow
            Resource: '*'
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: CognitoAuthorizedPolicy
    Type: AWS::IAM::Role
  CognitoUnAuthorizedRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: unauthenticated
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: IdentityPool
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - mobileanalytics:PutEvents
            - cognito-sync:*
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: CognitoUnauthorizedPolicy
    Type: AWS::IAM::Role
  IdentityPool:
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt:
          - UserPool
          - ProviderName
      IdentityPoolName: accountcreditIdentity
    Type: AWS::Cognito::IdentityPool
  IdentityPoolRoleMapping:
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - CognitoAuthorizedRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - CognitoUnAuthorizedRole
          - Arn
    Type: AWS::Cognito::IdentityPoolRoleAttachment
  LambdaProxyPermission:
    DependsOn:
    - ApiAccountGateway
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Ref: AccountFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiAccountGateway}/*/*/*
    Type: AWS::Lambda::Permission
  LambdaRootPermission:
    DependsOn:
    - ApiAccountGateway
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Ref: AccountFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiAccountGateway}/*/*/
    Type: AWS::Lambda::Permission
  RoleLambda:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - apigateway.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AWSLambdaReadOnlyAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      MaxSessionDuration: 3600
      RoleName: lambda-role-default
    Type: AWS::IAM::Role
  SNSRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - cognito-idp.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action: sns:publish
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: CognitoSNSPolicy
    Type: AWS::IAM::Role
  UserPool:
    Properties:
      AutoVerifiedAttributes:
      - phone_number
      MfaConfiguration: OPTIONAL
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
      - AttributeDataType: String
        Mutable: true
        Name: name
        Required: false
      - AttributeDataType: String
        Mutable: false
        Name: email
        Required: true
      - AttributeDataType: String
        Mutable: false
        Name: phone_number
        Required: true
      SmsConfiguration:
        ExternalId: accountcredit-external
        SnsCallerArn:
          Fn::GetAtt:
          - SNSRole
          - Arn
      UserPoolName: accountcredit-user-pool
      UsernameAttributes:
      - email
    Type: AWS::Cognito::UserPool
  UserPoolClient:
    Properties:
      ClientName: accountcredit-client
      ExplicitAuthFlows:
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      GenerateSecret: false
      UserPoolId:
        Ref: UserPool
    Type: AWS::Cognito::UserPoolClient
Transform: AWS::Serverless-2016-10-31
